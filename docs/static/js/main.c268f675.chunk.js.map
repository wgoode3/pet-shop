{"version":3,"sources":["components/pet-component.js","App.js","serviceWorker.js","index.js"],"names":["PetComponent","props","useState","petsReceived","givePets","species","onClick","event","target","style","backgroundColor","color","alert","noise","pets","App","name","map","pet","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAuCeA,EAnBM,SAAAC,GAAU,IAAD,EACKC,mBAAS,GADd,mBACrBC,EADqB,KACPC,EADO,KAW5B,OACE,kCACE,gCAAUH,EAAMI,SAChB,4BAAQC,QAXA,SAAAC,GACVA,EAAMC,OAAOC,MAAMC,gBAAkBT,EAAMS,gBAC3CH,EAAMC,OAAOC,MAAME,MAAQV,EAAMU,MACjCC,MAAM,OAAD,OAAQX,EAAMI,QAAd,kBAA+BJ,EAAMY,MAArC,MACLD,MAAM,OAAD,OAAQX,EAAMI,QAAd,4BAAyCF,EAAzC,aACLC,EAAUD,EAAe,KAMvB,WAAkCF,EAAMI,WC9BxCS,EAAO,CACX,CAACT,QAAS,QAASQ,MAAM,SAAUH,gBAAiB,gBAAiBC,MAAM,QAC3E,CAACN,QAAS,SAAUQ,MAAM,MAAOH,gBAAiB,SAAUC,MAAM,QAClE,CAACN,QAAS,SAAUQ,MAAM,eAAgBH,gBAAiB,iBAAkBC,MAAM,QACnF,CAACN,QAAS,MAAOQ,MAAM,OAAQH,gBAAiB,SAAUC,MAAM,SAuBnDI,MAnBf,SAAad,GACX,OACE,oCACE,0CAAgBA,EAAMe,KAAtB,cAEEF,EAAKG,KAAK,SAACC,EAAKC,GAAN,OACV,kBAAC,EAAD,CACEC,IAAKD,EACLd,QAASa,EAAIb,QACbQ,MAAOK,EAAIL,MACXH,gBAAiBQ,EAAIR,gBACrBC,MAAOO,EAAIP,aCXDU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,CAAKX,KAAK,UAAYY,SAASC,eAAe,SD6HxD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c268f675.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\n// class PetComponent extends Component {\n//   pet = (event) => {\n//     console.log(event.target);\n//     event.target.style.backgroundColor = this.props.backgroundColor;\n//     event.target.style.color = this.props.color;\n//     alert(`The ${this.props.species} says \"${this.props.noise}\"`);\n//   }\n//   render() {\n//     return (\n//       <fieldset>\n//         <legend>{ this.props.species }</legend>\n//         <button onClick={ this.pet }>Pet the { this.props.species }</button>\n//       </fieldset>\n//     )\n//   }\n// }\n\nconst PetComponent = props => {\n  const [petsReceived, givePets] = useState(1);\n\n  const pet = event => {\n    event.target.style.backgroundColor = props.backgroundColor;\n    event.target.style.color = props.color;\n    alert(`The ${props.species} says \"${props.noise}\"`);\n    alert(`The ${props.species} has been petted ${petsReceived} time(s)`);\n    givePets( petsReceived + 1 );\n  }\n\n  return (\n    <fieldset>\n      <legend>{ props.species }</legend>\n      <button onClick={ pet }>Pet the { props.species }</button>\n    </fieldset>\n  )\n}\n\nexport default PetComponent;","import React from 'react';\nimport './App.css';\nimport PetComponent from './components/pet-component';\n\nconst pets = [\n  {species: \"doggo\", noise:\"awooo~\", backgroundColor: \"rebeccapurple\", color:\"#fff\"},\n  {species: \"turtle\", noise:\"...\", backgroundColor: \"tomato\", color:\"#fff\"},\n  {species: \"parrot\", noise:\"Artemis Fowl\", backgroundColor: \"mediumseagreen\", color:\"#fff\"},\n  {species: \"cat\", noise:\"nyan\", backgroundColor: \"orange\", color:\"#000\"}\n];\n\n\nfunction App(props) {\n  return (\n    <>\n      <h1>Welcome to {props.name}'s petshop</h1>\n      {\n        pets.map( (pet, i) => \n        <PetComponent\n          key={i}\n          species={pet.species}\n          noise={pet.noise}\n          backgroundColor={pet.backgroundColor}\n          color={pet.color}\n        />\n        )\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App name=\"Brian\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}